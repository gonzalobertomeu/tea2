#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jul 03, 2019 01:25:12 PM -03  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import views.abm_pacientes_support as abm_pacientes_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    abm_pacientes_support.set_Tk_var()
    top = abmPacientes (root)
    abm_pacientes_support.init(root, top)
    root.mainloop()

w = None
def create_abmPacientes(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt, top
    rt = root
    w = tk.Toplevel (root)
    abm_pacientes_support.set_Tk_var()
    top = abmPacientes (w)
    abm_pacientes_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_abmPacientes():
    global w
    w.destroy()
    w = None

class abmPacientes:
    def __init__(self, top=None):
        self.pacientes = []
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 18 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("694x450+418+176")
        top.title("paciente")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Message1 = tk.Message(top)
        self.Message1.place(relx=0.043, rely=0.022, relheight=0.118
                , relwidth=0.937)
        self.Message1.configure(background="#546ad8")
        self.Message1.configure(font=font9)
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(text='''ABM Pacientes''')
        self.Message1.configure(width=650)

        self.nombreLabel = ttk.Label(top)
        self.nombreLabel.place(relx=0.504, rely=0.2, height=19, width=88)
        self.nombreLabel.configure(background="#d9d9d9")
        self.nombreLabel.configure(foreground="#000000")
        self.nombreLabel.configure(font="TkDefaultFont")
        self.nombreLabel.configure(relief="flat")
        self.nombreLabel.configure(text='''Nombre''')
        self.nombreLabel.configure(width=100)

        self.apellidoLabel = ttk.Label(top)
        self.apellidoLabel.place(relx=0.043, rely=0.2, height=19, width=86)
        self.apellidoLabel.configure(background="#d9d9d9")
        self.apellidoLabel.configure(foreground="#000000")
        self.apellidoLabel.configure(font="TkDefaultFont")
        self.apellidoLabel.configure(relief="flat")
        self.apellidoLabel.configure(text='''Apellido''')
        self.apellidoLabel.configure(width=100)

        self.TLabel1_2 = ttk.Label(top)
        self.TLabel1_2.place(relx=0.036, rely=0.511, height=1, width=36)
        self.TLabel1_2.configure(background="#d9d9d9")
        self.TLabel1_2.configure(foreground="#000000")
        self.TLabel1_2.configure(font="TkDefaultFont")
        self.TLabel1_2.configure(relief="flat")
        self.TLabel1_2.configure(text='''Tlabel''')

        self.dniLabel = ttk.Label(top)
        self.dniLabel.place(relx=0.043, rely=0.267, height=19, width=86)
        self.dniLabel.configure(background="#d9d9d9")
        self.dniLabel.configure(foreground="#000000")
        self.dniLabel.configure(font="TkDefaultFont")
        self.dniLabel.configure(relief="flat")
        self.dniLabel.configure(text='''Documento''')
        self.dniLabel.configure(width=86)

        self.nacimientoLabel = ttk.Label(top)
        self.nacimientoLabel.place(relx=0.504, rely=0.267, height=19, width=140)
        self.nacimientoLabel.configure(background="#d9d9d9")
        self.nacimientoLabel.configure(foreground="#000000")
        self.nacimientoLabel.configure(font="TkDefaultFont")
        self.nacimientoLabel.configure(relief="flat")
        self.nacimientoLabel.configure(text='''Fecha de Nacimiento''')
        self.nacimientoLabel.configure(width=130)

        self.sexoLabel = ttk.Label(top)
        self.sexoLabel.place(relx=0.504, rely=0.333, height=19, width=76)
        self.sexoLabel.configure(background="#d9d9d9")
        self.sexoLabel.configure(foreground="#000000")
        self.sexoLabel.configure(font="TkDefaultFont")
        self.sexoLabel.configure(relief="flat")
        self.sexoLabel.configure(text='''Sexo''')
        self.sexoLabel.configure(width=76)

        self.nacionalidadLabel = ttk.Label(top)
        self.nacionalidadLabel.place(relx=0.043, rely=0.333, height=19, width=88)

        self.nacionalidadLabel.configure(background="#d9d9d9")
        self.nacionalidadLabel.configure(foreground="#000000")
        self.nacionalidadLabel.configure(font="TkDefaultFont")
        self.nacionalidadLabel.configure(relief="flat")
        self.nacionalidadLabel.configure(text='''Nacionalidad''')
        self.nacionalidadLabel.configure(width=84)

        self.nombreImput = ttk.Entry(top)
        self.nombreImput.place(relx=0.719, rely=0.2, relheight=0.047
                , relwidth=0.260)
        self.nombreImput.configure(textvariable=abm_pacientes_support.nombre)
        self.nombreImput.configure(width=186)
        self.nombreImput.configure(takefocus="")
        

        self.apellidoInput = ttk.Entry(top)
        self.apellidoInput.place(relx=0.179, rely=0.2, relheight=0.047
                , relwidth=0.297)
        self.apellidoInput.configure(textvariable=abm_pacientes_support.apellido)
        self.apellidoInput.configure(width=206)
        self.apellidoInput.configure(takefocus="")
        

        self.dniInput = ttk.Entry(top)
        self.dniInput.place(relx=0.179, rely=0.267, relheight=0.047
                , relwidth=0.196)
        self.dniInput.configure(textvariable=abm_pacientes_support.dni)
        self.dniInput.configure(width=136)
        self.dniInput.configure(takefocus="")
        
        tooltip_font = "TkDefaultFont"
        ToolTip(self.dniInput, tooltip_font, '''Sin puntos''', delay=0.5)

        self.nacimientoInput = ttk.Entry(top)
        self.nacimientoInput.place(relx=0.719, rely=0.267, relheight=0.047
                , relwidth=0.138)
        self.nacimientoInput.configure(textvariable=abm_pacientes_support.fecha)
        self.nacimientoInput.configure(width=96)
        self.nacimientoInput.configure(takefocus="")
        
        tooltip_font = "TkDefaultFont"
        ToolTip(self.nacimientoInput, tooltip_font, '''DD-MM-AAAA''', delay=0.5)

        self.nacionalidadInput = ttk.Entry(top)
        self.nacionalidadInput.place(relx=0.179, rely=0.333, relheight=0.047
                , relwidth=0.254)
        self.nacionalidadInput.configure(textvariable=abm_pacientes_support.nacion)
        self.nacionalidadInput.configure(width=176)
        self.nacionalidadInput.configure(takefocus="")
        

        self.grabarButton = ttk.Button(top)
        self.grabarButton.place(relx=0.533, rely=0.889, height=25, width=76)
        self.grabarButton.configure(takefocus="")
        self.grabarButton.configure(text='''Grabar''')
        self.grabarButton.configure(command=abm_pacientes_support.nuevoPaciente)

        self.salirButton = ttk.Button(top)
        self.salirButton.place(relx=0.706, rely=0.889, height=25, width=76)
        self.salirButton.configure(command=abm_pacientes_support.destroy_window)
        self.salirButton.configure(takefocus="")
        self.salirButton.configure(text='''Salir''')

        self.style.map('TRadiobutton',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.femeninoradio = ttk.Radiobutton(top)
        self.femeninoradio.place(relx=0.700, rely=0.333, relwidth=0.049
                , relheight=0.0, height=21)
        self.femeninoradio.configure(variable=abm_pacientes_support.sexo)
        self.femeninoradio.configure(value="femenino")
        self.femeninoradio.configure(takefocus="")
        self.femeninoradio.configure(text='''F''')

        self.masculinoRadio = ttk.Radiobutton(top)
        self.masculinoRadio.place(relx=0.778, rely=0.333, relwidth=0.049
                , relheight=0.0, height=21)
        self.masculinoRadio.configure(variable=abm_pacientes_support.sexo)
        self.masculinoRadio.configure(value="masculino")
        self.masculinoRadio.configure(takefocus="")
        self.masculinoRadio.configure(text='''M''')

        self.pacienteList = ScrolledListBox(top)
        self.pacienteList.place(relx=0.058, rely=0.422, relheight=0.411
                , relwidth=0.88)
        self.pacienteList.configure(background="white")
        self.pacienteList.configure(disabledforeground="#a3a3a3")
        self.pacienteList.configure(font="TkFixedFont")
        self.pacienteList.configure(foreground="black")
        self.pacienteList.configure(highlightbackground="#d9d9d9")
        self.pacienteList.configure(highlightcolor="#d9d9d9")
        self.pacienteList.configure(selectbackground="#c4c4c4")
        self.pacienteList.configure(selectforeground="black")
        self.pacienteList.configure(width=10)

        self.actualizar()

        self.nuevoButton = ttk.Button(top)
        self.nuevoButton.place(relx=0.187, rely=0.889, height=25, width=76)
        self.nuevoButton.configure(takefocus="")
        self.nuevoButton.configure(text='''Nuevo''')

        self.editButton = ttk.Button(top)
        self.editButton.place(relx=0.36, rely=0.889, height=25, width=76)
        self.editButton.configure(takefocus="")
        self.editButton.configure(text='''Editar''')

    def actualizar(self):
        
        self.pacientes = abm_pacientes_support.getAll()

        for item in self.pacientes:
            self.pacienteList.insert(tk.END,[item.nombre,item.apellido])

    def insertarUltimo(self, item):
        self.pacienteList.insert(tk.END,"{}, {}, {}".format(item.apellido,item.nombre,item.dni))
    
    def clear(self):
        abm_pacientes_support.apellido.set("")
        abm_pacientes_support.nombre.set("")
        abm_pacientes_support.dni.set("")
        abm_pacientes_support.sexo.set("")
        abm_pacientes_support.nacion.set("")
        abm_pacientes_support.fecha.set("")
# ======================================================
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





