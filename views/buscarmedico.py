#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jul 10, 2019 01:51:23 PM -03  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import views.buscarmedico_support as buscarmedico_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    buscarmedico_support.set_Tk_var()
    top = buscarMedico (root)
    buscarmedico_support.init(root, top)
    root.mainloop()

w = None
def create_buscarMedico(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt, top
    rt = root
    w = tk.Toplevel (root)
    buscarmedico_support.set_Tk_var()
    top = buscarMedico (w)
    buscarmedico_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_buscarMedico():
    global w
    w.destroy()
    w = None

class buscarMedico:
    def __init__(self, top=None):
        self.medicos = []
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("467x202+483+151")
        top.title("buscar")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.busqueda = ttk.Entry(top)
        self.busqueda.place(relx=0.064, rely=0.149, relheight=0.104
                , relwidth=0.591)
        self.busqueda.configure(takefocus="")
        self.busqueda.configure(textvariable=buscarmedico_support.medico_search)
        self.busqueda.bind("<Return>",self.buscarApellido)
        

        self.listaMedicos = ScrolledListBox(top)
        self.listaMedicos.place(relx=0.064, rely=0.347, relheight=0.421
                , relwidth=0.88)
        self.listaMedicos.configure(background="white")
        self.listaMedicos.configure(disabledforeground="#a3a3a3")
        self.listaMedicos.configure(font="TkFixedFont")
        self.listaMedicos.configure(foreground="black")
        self.listaMedicos.configure(highlightbackground="#d9d9d9")
        self.listaMedicos.configure(highlightcolor="#d9d9d9")
        self.listaMedicos.configure(selectbackground="#c4c4c4")
        self.listaMedicos.configure(selectforeground="black")
        self.listaMedicos.configure(width=10)

        

        self.aceptarPaciente = ttk.Button(top)
        self.aceptarPaciente.place(relx=0.728, rely=0.792, height=25, width=76)
        self.aceptarPaciente.configure(takefocus="")
        self.aceptarPaciente.configure(text='''Aceptar''')
        self.aceptarPaciente.configure(command=self.getLista)

    def buscarApellido(self,event):
        buscarmedico_support.getPorApellido(self.busqueda.get())
        
    def actualizar(self):
        self.clearTable()
        self.medicos = buscarmedico_support.getAll()
        for medico in self.medicos:
            self.listaMedicos.insert(tk.END,"{}, {}".format(medico.apellido, medico.nombre))

    def insertar(self, items):
        self.clearTable()
        for item in items:
            self.medicos.append(item)
            self.listaMedicos.insert(tk.END,"{}, {}".format(item.apellido, item.nombre))

    def getLista(self):
        index = self.listaMedicos.index(tk.ACTIVE)
        if(len(self.medicos) == 0):
            return None
        selected = self.medicos[index]
        if (selected != None):
            import views.estudios as est
            est.top.setMedico(selected)
            buscarmedico_support.destroy_window()


    def clearTable(self):
        self.listaMedicos.delete(0,len(self.medicos))
        self.medicos = []

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





